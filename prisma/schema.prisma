// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int                 @id @default(autoincrement())
  email       String              @unique
  firstName   String
  lastName    String
  bio         String?
  day         Int
  month       Int
  year        Int
  profileUrl  String?
  isOnline    Boolean
  forUserId   UserIdAndFriendId[] @relation(name: "forUserId")
  forFriendId UserIdAndFriendId[] @relation(name: "forFriendId")
  forForwardFriendId  Chats[]
}

model UserIdAndFriendId {
  id       Int     @id @default(autoincrement())
  userId   Int
  friendId Int
  isPinChat Boolean @default(false)
  user     User    @relation(name: "forUserId", fields: [userId], references: [id])
  friend   User    @relation(name: "forFriendId", fields: [friendId], references: [id])
  forChats Chats[]
}

model Chats {
  id                      Int                  @id @default(autoincrement())
  userAndFriendRelationId Int
  message                 String
  imageMessageUrl         String?
  seen                    Boolean
  replyId                 Int?
  isPin                   Boolean              @default(false)
  forwardFriendId         Int?
  createdAt               DateTime             @default(now())
  updatedAt               DateTime             @updatedAt
  userIdAndFriendId       UserIdAndFriendId    @relation(fields: [userAndFriendRelationId], references: [id])
  Chats                   Chats[] @relation("forReplyId")
  forReplyId              Chats?  @relation("forReplyId" , fields: [replyId] , references: [id])
  forForwardFriendId         User?   @relation(fields: [forwardFriendId] , references: [id])
}
